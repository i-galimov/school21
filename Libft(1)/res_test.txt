âžœ  result >....
Test1

ft_memcmp       : 1.KO 2.OK 3.KO 4.KO 5.OK
tests/ft_strlen_test.cpp:18:26: warning: ISO C++11 does not allow conversion
      from string literal to 'char *' [-Wwritable-strings]
        /* 1 */ check(ft_strlen("123") == 3); showLeaks();
                                ^
tests/ft_strlen_test.cpp:19:26: warning: ISO C++11 does not allow conversion
      from string literal to 'char *' [-Wwritable-strings]
        /* 2 */ check(ft_strlen("") == 0); showLeaks();
                                ^
2 warnings generated.
ft_memset	: 1.OK 2.OK
ft_bzero	: 1.OK 2.OK 3.OK
ft_memcpy	: 1.OK 2.OK
ft_memmove	: 1.OK 2.KO 3.KO 4.KO
ft_memchr	: 1.OK 2.OK 3.OK 4.OK 5.OK
ft_memcmp	: 1.KO 2.OK 3.KO 4.KO 5.OK
ft_strlen       : 1.OK 2.OK
ft_isalpha      : 1.OK 2.OK 3.OK 4.OK 5.OK 6.OK 7.OK 8.OK
ft_isdigit      : 1.OK 2.OK 3.OK 4.OK
ft_isalnum      : 1.OK 2.OK 3.OK 4.OK 5.OK 6.OK 7.OK 8.OK 9.OK 10.OK 11.OK 12.OK
ft_isascii      : 1.OK 2.OK 3.OK 4.OK
ft_isprint      : 1.OK 2.OK 3.OK 4.OK
ft_toupper      : 1.OK 2.OK 3.OK 4.OK
ft_tolower      : 1.OK 2.OK 3.OK 4.OK
ft_strchr       : 1.KO 2.KO 3.OK 4.KO 5.KO
ft_strrchr      : 1.KO 2.KO 3.KO 4.OK 5.KO 6.KO 7.OK
ft_strncmp      : 1.KO 2.KO 3.OK 4.OK 5.OK 6.OK 7.KO 8.OK 9.OK 10.OK 11.OK 12.KO 13.KO 14.OK 15.OK 16.OK
ft_strlcpy      : 1.OK 2.KO 3.KO 4.KO 5.KO 6.KO 7.KO 8.KO 9.OK

Test 2

First part
.-"-.     .-"-.     .-"-.     .-"-.     .-"-.     .-"-.
     "-.-"     "-.-"     "-.-"     "-.-"     "-.-"
ft_memset:     [OK] [OK] [OK] [OK] [OK] [OK] [OK]
ft_bzero:      [OK] [OK] [OK] [OK]
ft_memcpy:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [NO CRASH] [OK] [OK] [OK]
[no crash]: your memcpy does not segv with NULL on first params

ft_memccpy:    [MISSING]
ft_memmove:    [CRASH] [CRASH] [CRASH] [FAILED] [CRASH] [FAILED] [OK] [OK] [CRASH] [NO CRASH] [OK] [OK] [OK] [CRASH]
[crash]: your memmove does not work with basic input
[crash]: your memmove's return is false/does not work with basic input
[crash]: your memmove does not work with \0 and others unsigned char codes
[fail]: your memmove does not work with integers copy
[crash]: your memmove does not support the overlap (test 1)
[fail]: your memmove does not support the overlap (test 2)
[crash]: your memmove crash because it read too many bytes or attempt to read on dst !
[no crash]: your memmove does not segfault when null params is sent
[crash]: your memmove use malloc ? why ?

ft_memchr:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK]
ft_memcmp:     [OK] [OK] [FAILED] [OK] [OK] [OK] [OK] [CRASH] [OK] [OK]
[fail]: your memcmp does not work with basic input
[crash]: your memcmp crash because it read too many bytes !

ft_strlen:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK]
ft_isalpha:    [OK]
ft_isdigit:    [OK]
ft_isalnum:    [OK]
ft_isascii:    [OK]
ft_isprint:    [OK]
ft_toupper:    [OK]
ft_tolower:    [OK]
ft_strchr:     [FAILED] [FAILED] [FAILED] [OK] [OK] [OK] [FAILED] [OK] [OK] [NO CRASH]
[fail]: your strchr does not work with basic input
[fail]: your strchr does not work with the first char of input
[fail]: your strchr does not work with the char before \0
[fail]: your strchr does not work with \0
[no crash]: your strchr does not segfault with NULL parameter

ft_strrchr:    [FAILED] [FAILED] [FAILED] [OK] [FAILED] [OK] [CRASH] [NO CRASH]
[fail]: your strrchr does not work with basic input
[fail]: your strrchr does not work with basic input
[fail]: your strrchr does not work with not found char
[fail]: your strrchr does not work with \0
[crash]: your strrchr crash because it read too many bytes or attempt to write on s !
[no crash]: your strrchr does not segfault when a null parameter is sent

ft_strncmp:    [OK] [FAILED] [OK] [FAILED] [OK] [OK] [OK] [FAILED] [OK] [OK] [FAILED] [CRASH] [OK] [OK]
[fail]: your strncmp does not work with basic input
[fail]: your strncmp does not work with basic input
[fail]: your strncmp doesn't stop at \0
[fail]: your strncmp does not work when s1 is contained in s2
[crash]: your strncmp crash because it read too many bytes !

ft_strlcpy:    [FAILED] [FAILED] [FAILED] [FAILED] [OK] [OK] [OK]
[fail]: your strlcpy does not works with basic input
[fail]: your strlcpy does not return the good value
[fail]: your strlcpy overflow the dest
[fail]: your strlcpy does works whe size < strlen(src)

ft_strlcat:    [CRASH] [CRASH] [CRASH] [CRASH] [OK] [CRASH] [CRASH] [CRASH] [CRASH] [CRASH] [NO CRASH] [NO CRASH]
[crash]: your strlcat does not work with basic input
[crash]: your strlcat does not work with basic input
[crash]: your strlcat does not work with basic input
[crash]: your strlcat does not work with over length size
[crash]: your strcat does not work with empty string as first parameter
[crash]: your strcat does not work with empty string as second parameter
[crash]: your strlcat does not set a \0 to the end
[crash]: your strlcat crash because it read too many bytes or attempt to write on buff !
[crash]: your strlcat return value is false
[no crash]: your strlcat does not segfault when null parameter is sent
[no crash]: your strlcat does not segfault when null parameter is sent

ft_strnstr:    [FAILED] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [FAILED] [FAILED] [CRASH] [OK] [OK]
[fail]: your strnstr does not work with basic input
[fail]: your strnstr does not work with empty strings and 0 length
[fail]: your strnstr does not work with empty strings and 0 length
[crash]: your strnstr crash because it read too many bytes !

ft_atoi:       [TIMEOUT] [TIMEOUT] [TIMEOUT] [TIMEOUT] [OK] [TIMEOUT] [TIMEOUT] [TIMEOUT] [TIMEOUT] [TIMEOUT] [TIMEOUT] [TIMEOUT] [TIMEOUT] [TIMEOUT] [TIMEOUT] [TIMEOUT] [OK] run_test(81344,0x10fe575c0) malloc: *** error for object 0x7fa2a780020a: pointer being freed was not allocated
run_test(81344,0x10fe575c0) malloc: *** set a breakpoint in malloc_error_break to debug

[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations

ft_calloc:     [CRASH] [OK] [FAILED] [OK] [OK]
[crash]: your calloc don't allocate memory
[fail]: your calloc don't work with empty string

ft_strdup:     [TIMEOUT] [TIMEOUT] [OK] [TIMEOUT] [TIMEOUT] [TIMEOUT] [OK]
[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations
[timeout]: see the log file for informations


In this part, you can choose to protect your function or not to,
a color code will tell you if your function is protected/not BUT stay coherent !
[ðŸ›¡ ] --> protected
[ðŸ’¥ ] --> not protected
                     Second part
 __)(__  __)(__  __)(__  __)(__  __)(__  __)(__  __)(__  __)
(______)(______)(______)(______)(______)(______)(______)(___

ft_substr:     [OK] [OK] [OK] [OK] [OK] [OK] [OK] [OK] [ðŸ’¥ ] [FAILED]
[fail]: your substr does not work when start >= ft_strlen(s)

ft_strjoin:    [OK] [OK] [FAILED] [OK] [FAILED] [ðŸ›¡ ]
[fail]: your strjoin does not work with overlap input
[fail]: your strjoin does not set \0 to the end of the string

ft_strtrim:    [OK] [FAILED] [FAILED] [FAILED] [OK] [KO] [OK] [OK] [OK] [ðŸ’¥ ] run_test(81481,0x10fe575c0) malloc: Incorrect checksum for freed object 0x7fa2a5c02ba0: probably modified after being freed.
Corrupt value: 0x7fa2a5c02b90
run_test(81481,0x10fe575c0) malloc: *** set a breakpoint in malloc_error_break to debug

[fail]: your strtrim does not work with basic input
[fail]: your strtrim does not work with basic input
[fail]: your strtrim does not work with full blank input
[KO]: your strtrim did not allocate the good size so the \0 test may be false

ft_split:      [CRASH] [OK] [FAILED] [FAILED] [OK] run_test(81486,0x10fe575c0) malloc: Incorrect checksum for freed object 0x7fa2a5c001a8: probably modified after being freed.
Corrupt value: 0x7fa2a5c00190
run_test(81486,0x10fe575c0) malloc: *** set a breakpoint in malloc_error_break to debug
[CRASH] [OK] [FAILED] [OK] run_test(81490,0x10fe575c0) malloc: Incorrect checksum for freed object 0x7fa2a5c001a0: probably modified after being freed.
Corrupt value: 0x7fa2a5c00190
run_test(81490,0x10fe575c0) malloc: *** set a breakpoint in malloc_error_break to debug
[CRASH] [ðŸ’¥ ]
[crash]: your split does not work with basic input
[fail]: your split does not work with one word
[fail]: your split does not work with one word
[crash]: your split does not work with full string
[fail]: your split does not work with basic input
[crash]: your split does not work with basic input

ft_itoa:       [OK] [OK] [OK] [OK] [FAILED] [OK] [OK] [OK] [CRASH]
[fail]: your itoa don't set \0 at the end of the string
[crash]: your itoa did not allocate memory for the int min value

ft_strmapi:    [CRASH] [CRASH] [CRASH] [FAILED] [OK] [ðŸ’¥ ]
[crash]: your strmapi does not work
[crash]: your strmapi does not malloc ?
[crash]: your strmapi did not set \0 at the end of the string
[fail]: your strmapi does not allocate the good size so the \0 test may be false

ft_putchar_fd: [OK] [OK]
ft_putstr_fd:  [OK] [OK] [ðŸ’¥ ]
ft_putendl_fd: [OK] [OK] [ðŸ’¥ ]
ft_putnbr_fd:  [OK] [OK] [OK] [OK] [OK]
ft_striteri:   [OK] [OK] [ðŸ›¡ ]

Test 3
